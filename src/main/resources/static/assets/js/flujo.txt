El proyecto Gestor de Gastos es una aplicación web que permite a los usuarios gestionar sus ingresos y gastos personales de manera eficiente. A través de una interfaz intuitiva, los usuarios pueden agregar, modificar y eliminar transacciones. Además, pueden visualizar estadísticas sobre sus gastos e ingresos, lo que les ayuda a llevar un control financiero más efectivo.

Funcionalidades Principales
Registro y Autenticación: Los usuarios pueden registrarse y autenticarse para acceder a su cuenta.
Gestión de Transacciones: Los usuarios pueden añadir, modificar y eliminar transacciones de ingresos y gastos.
Categorías Personalizadas: Los usuarios pueden crear y gestionar categorías para clasificar sus transacciones.
Filtrado de Transacciones: Permite a los usuarios filtrar transacciones por valor, tipo, categoría y fecha.
Balance de Gastos e Ingresos: Proporciona un resumen del balance general, mostrando el total de ingresos, gastos y saldo actual.

============================================================================================================================================================================================================================================================================================================
Estructura de carpetas

/GestorGastosFrontend
│
├── assets
│   ├── css
│   │   └── estilos.css
│   ├── html
│   │   ├── account.html
│   │   ├── dashboard.html
│   │   ├── login.html
│   │   └── signup.html
│   └── js
│       └── util.js
│
└── src
    ├── model
    │   ├── account
    │   │   └── User.js
    │   ├── operation
    │   │   ├── Transaccion.js
    │   │   ├── TransactionManager.js
    │   │   ├── TransactionFilter.js
    │   └── tag
    │       └── Category.js
    │
    └── views
        ├── account.js
        ├── dashboard.js
        ├── login.js
        └── signup.js

============================================================================================================================================================================================================================================================================================================

Flujo del Aplicativo de Gestión de Gastos

1. Inicio de la Aplicación: Pantalla de Inicio de Sesión (login.html)
Descripción: La aplicación comienza en la pantalla de inicio de sesión donde los usuarios pueden ingresar sus credenciales.
Código involucrado: login.js se ejecuta cuando el DOM está listo.
Eventos:
Al hacer clic en el botón "Ingresar", se ejecuta el evento submit.
El formulario envía el correo electrónico y la contraseña a través de los campos inputEmail y inputPassword.
Validación: La función User.validateUser() busca el usuario en la base de datos (almacenada en sessionStorage). Si las credenciales son válidas, la sesión se inicia mediante initSession(account).
Si el usuario es válido, se redirige a dashboard.html con la sesión iniciada. Si no, se muestra un mensaje de error.
====================================================================================================
2. Registro de Nuevos Usuarios (signup.html)
Descripción: En esta pantalla, los nuevos usuarios pueden registrarse proporcionando su nombre, correo y contraseña.
Código involucrado: signup.js se encarga de procesar los datos ingresados.
Eventos:
Al hacer clic en el botón "Registrarse", se valida que todos los campos estén completos mediante la función completeInput().
También se valida que las contraseñas coincidan usando confirmPassword().
Si todas las validaciones son correctas, se crea una nueva instancia de User con los datos proporcionados. El nuevo usuario se guarda en sessionStorage y se inicia sesión automáticamente mediante initSession(user).
====================================================================================================
3. Página Principal del Usuario: Dashboard (dashboard.html)
Descripción: Esta página permite al usuario visualizar y gestionar sus transacciones, categorías y balance.
Código involucrado: El archivo dashboard.js contiene la lógica de las operaciones principales.
Eventos:
Al cargar la página, se ejecutan las funciones User.loadDataSession(), Transaccion.loadDataSession() y Category.loadDataSession() para restaurar los datos del usuario, las transacciones y las categorías desde sessionStorage.
El nombre del usuario es mostrado en la bienvenida, y el balance total de ingresos y gastos es calculado.
Añadir transacciones:
El usuario puede añadir nuevas transacciones completando el formulario. Al hacer clic en el botón "Añadir", se ejecuta createTransaction(), que crea una nueva transacción y la guarda en sessionStorage. La lista de transacciones se actualiza en tiempo real.
Modificar/Eliminar transacciones:
Los botones asociados a cada transacción permiten modificar o eliminar una transacción. Al modificar, se muestran los valores actuales de la transacción en el formulario para su edición, y luego se confirman los cambios. Al eliminar, se remueve la transacción de la base de datos.
Filtrar transacciones:
Los usuarios pueden filtrar las transacciones por tipo, categoría, valor o fecha. Al hacer clic en "Filtrar", se aplica el filtro mediante el método filter() de la clase TransactionFilter, y se muestran solo las transacciones que coinciden.
====================================================================================================
4. Gestión de Categorías: Cuenta de Usuario (account.html)
Descripción: En esta página, el usuario puede gestionar su cuenta, ver sus estadísticas y administrar sus categorías personalizadas.
Código involucrado: El archivo account.js gestiona esta página.
Eventos:
Visualización de estadísticas: Se muestran las estadísticas generales del usuario (número total de ingresos y gastos, balance total, etc.).
Gestión de categorías:
Las categorías por defecto son cargadas automáticamente, y el usuario puede añadir o modificar categorías personalizadas.
Al hacer clic en el botón "Añadir", se despliega un formulario para ingresar una nueva categoría. Las categorías personalizadas se guardan en sessionStorage usando Category.saveDataSession().
Las categorías por defecto no pueden ser modificadas ni eliminadas.
Modificar datos del usuario:
El usuario puede cambiar su nombre, correo electrónico o contraseña. Estos cambios se reflejan en sessionStorage mediante User.saveDataSession().
====================================================================================================
5. Cierre de Sesión
Descripción: En cualquier momento, el usuario puede cerrar sesión.
Código involucrado: Tanto en dashboard.js como en account.js, el evento click sobre el botón "Cerrar sesión" ejecuta la función endSession(), que borra la información de la sesión del sessionStorage y redirige al usuario de vuelta a login.html.
====================================================================================================
6. Datos Guardados en sessionStorage
Descripción: La aplicación hace uso intensivo de sessionStorage para mantener la persistencia de datos mientras el usuario navega entre las páginas.
Datos guardados:
Usuarios: Los datos de los usuarios se almacenan en el objeto User._userData, que es un arreglo de todos los usuarios registrados. Estos datos se guardan y se restauran mediante sessionStorage.
Transacciones: Las transacciones se almacenan en Transaccion._transactionData, y se gestionan mediante la clase Transaccion. Se guardan y restauran utilizando sessionStorage para asegurar que no se pierdan al recargar la página.
Categorías: Las categorías personalizadas de cada usuario se almacenan en Category._categoriesData.
====================================================================================================
====================================================================================================
====================================================================================================

Resumen General del Flujo
1. El usuario llega a la pantalla de inicio de sesión (login.html) y, si las credenciales son válidas, se redirige al dashboard.html.
2. En signup.html, el usuario puede registrarse si aún no tiene una cuenta.
3. En dashboard.html, el usuario puede gestionar sus transacciones, aplicar filtros y ver su balance.
4. En account.html, el usuario puede administrar su perfil y las categorías.
5. Los datos del usuario, transacciones y categorías se almacenan en sessionStorage para su persistencia mientras navega por la aplicación.
6. Al cerrar sesión, todos los datos de sesión se borran y el usuario es redirigido a la página de inicio de sesión.

====================================================================================================
====================================================================================================
====================================================================================================

Consideraciones Finales
-Cada página carga los datos desde sessionStorage al inicializar, lo que permite que la información esté disponible sin necesidad de recargar toda la aplicación desde un servidor.
-La estructura de control y gestión de transacciones está diseñada para ser modular, lo que facilita su extensión en el futuro.
-El flujo es sencillo y fácil de seguir, lo que proporciona una buena experiencia de usuario y una lógica clara para los desarrolladores que quieran mantener o mejorar el proyecto.

============================================================================================================================================================================================================================================================================================================

DIAGRAMA DE CLASE
+---------------------+
|       User          |
+---------------------+
| - _id               |
| - _name             |
| - _email            |
| - _password         |
| - _transactions     |
| - _categories       |
| + getId()          |
| + getName()        |
| + getEmail()       |
| + getPassword()     |
| + getTransactions() |
| + getCategories()   |
| + saveDataSession() |
| + loadDataSession() |
+---------------------+
          ^
          |
          |
+---------------------+
|     Transaccion     |
+---------------------+
| - _id               |
| - _user             |
| - _tipo             |
| - _valor            |
| - _descripcion      |
| - _categoria        |
| - _fecha            |
| + getType()         |
| + getValue()        |
| + saveDataSession() |
| + loadDataSession() |
+---------------------+
          ^
          |
          |
+---------------------+
|      Category       |
+---------------------+
| - _tag              |
| - _user             |
| + getTag()          |
| + getUserId()       |
| + saveDataSession()  |
| + loadDataSession()  |
+---------------------+

============================================================================================================================================================================================================================================================================================================

DIAGRAMA DE CLASE DETALLADO
+------------------+
|      User        |
+------------------+
| -_userData: User[] |
| -counterUser: int |
+------------------+
| +constructor(name: string, email: string, password: string) |
| +getId(): int |
| +getName(): string |
| +getEmail(): string |
| +getPassword(): string |
| +getTransactions(): Transaccion |
| +getCategories(): Category |
| +static loadDataSession(): void |
| +static validateUser(email: string, password: string): User |
| +static saveDataSession(): void |
+------------------+

+------------------+
|   Transaccion    |
+------------------+
| -contadorId: int |
| -_transactionData: Transaccion[] |
+------------------+
| +constructor(user: string, tipo: string, valor: number, descripcion: string, categoria: string, fecha: Date) |
| +static saveDataSession(): void |
| +static loadDataSession(): void |
| +getId(): int |
| +getType(): string |
| +getValue(): number |
| +getCategory(): string |
| +getDate(): Date |
| +updateListUser(id: string): void |
| +static getTransactionsUser(): Transaccion[] |
+------------------+

+------------------+
|     Category      |
+------------------+
| -_categoriesData: Category[] |
| -_categoriesUser: string[] |
| -_categoriesMain: string[] |
+------------------+
| +constructor(tag: string, user: string) |
| +static saveDataSession(): void |
| +static loadDataSession(): void |
| +static defaultCategories(): string[] |
| +updateListUser(id: string): void |
| +printCategories(select: HTMLSelectElement): void |
| +validateCategory(newCategory: string): boolean |
| +addCategory(category: string, user: string): void |
| +deleteCategory(tag: string, idUser: string): void |
+------------------+

============================================================================================================================================================================================================================================================================================================